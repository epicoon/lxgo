/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/App.js":
/*!********************!*\
  !*** ./src/App.js ***!
  \********************/
/***/ (() => {

eval("const API_ERR = {\n  ERR_NO_LOGIN_PWD: 1012,\n  ERR_WRONG_LOGIN_PWD: 1013,\n  ERR_INVAL_LOGIN: 1014,\n  ERR_INVAL_PWD: 1015,\n  ERR_LOGIN_EXISTS: 1016\n};\nconst ERR = {\n  NONE: 'none',\n  FATAL: 'fatal',\n  LOGIN_NEED_LOGIN: '_login_need_login',\n  LOGIN_NEED_PWD: '_login_need_pwd',\n  LOGIN_BAD_REQUEST: '_login_bad_request',\n  LOGIN_NOT_FOUND: '_login_not_found',\n  SIGNUP_NEED_LOGIN: '_signup_need_login',\n  SIGNUP_ILLEGAL_LOGIN: '_signup_illegal_login',\n  SIGNUP_LOGIN_EXISTS: '_signup_login_exists',\n  SIGNUP_NEED_PWD: '_signup_need_pwd',\n  SIGNUP_WEAK_PWD: '_signup_weak_pwd',\n  SIGNUP_NEED_PWD_CONFIRM: '_signup_need_pwd_confirm',\n  SIGNUP_PWD_MISMATCH: '_signup_pwd_mismatch',\n  SIGNUP_BAD_REQUEST: '_signup_bad_request'\n};\nclass View {\n  constructor() {\n    this.loginMark = document.querySelector('._loginMark');\n    this.signupMark = document.querySelector('._signupMark');\n    this.loginFormBox = document.querySelector('._loginForm');\n    this.signupFormBox = document.querySelector('._signupForm');\n    this.okButton = document.querySelector('._okButton');\n    this.loginInputs = {\n      login: document.querySelector('._inp_login_login'),\n      password: document.querySelector('._inp_login_pwd')\n    };\n    this.signupInputs = {\n      login: document.querySelector('._inp_signup_login'),\n      password: document.querySelector('._inp_signup_pwd'),\n      confirm: document.querySelector('._inp_signup_pwd_confirm')\n    };\n  }\n  hideWarnings() {\n    for (let i in ERR) {\n      if (i == 'NONE' || i == 'FATAL') continue;\n      let warningBox = document.querySelector('.' + ERR[i]);\n      warningBox.classList.add('auth-input-warning-hidden');\n    }\n  }\n\n  /**\n   * @param {string} cssClass \n   */\n  showWarning(cssClass) {\n    const warningBox = document.querySelector('.' + cssClass);\n    warningBox.classList.remove('auth-input-warning-hidden');\n  }\n  showForm() {\n    document.querySelector('._form').classList.remove('auth-mode-hidden');\n    document.querySelector('._msg_success').classList.add('auth-mode-hidden');\n    document.querySelector('._msg_fail').classList.add('auth-mode-hidden');\n  }\n  showSuccess() {\n    document.querySelector('._form').classList.add('auth-mode-hidden');\n    document.querySelector('._msg_success').classList.remove('auth-mode-hidden');\n    document.querySelector('._msg_fail').classList.add('auth-mode-hidden');\n  }\n  showFail() {\n    document.querySelector('._form').classList.add('auth-mode-hidden');\n    document.querySelector('._msg_success').classList.add('auth-mode-hidden');\n    document.querySelector('._msg_fail').classList.remove('auth-mode-hidden');\n  }\n}\nclass LoginForm {\n  /**\n   * @param {View} view \n   */\n  constructor(view) {\n    this.view = view;\n  }\n\n  /**\n   * @returns {string}\n   */\n  checkReadyToSubmit() {\n    const v = this.view;\n    if (v.loginInputs.login.value == '') return ERR.LOGIN_NEED_LOGIN;\n    if (v.loginInputs.password.value == '') return ERR.LOGIN_NEED_PWD;\n    return ERR.NONE;\n  }\n\n  /**\n   * @returns {string}\n   */\n  async submit() {\n    const v = this.view;\n    try {\n      const response = await fetch('/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          login: v.loginInputs.login.value,\n          password: v.loginInputs.password.value\n        })\n      });\n      if (!response.ok) {\n        if (response.status === 400) return ERR.LOGIN_BAD_REQUEST;\n        if (response.status === 401 || response.status === 404) return ERR.LOGIN_NOT_FOUND;\n        throw new Error(`Response failed: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.success) return ERR.NONE;\n      console.error(error);\n      return ERR.FATAL;\n    } catch (error) {\n      console.error(error);\n      return ERR.FATAL;\n    }\n  }\n}\nclass SignupForm {\n  /**\n   * @param {View} view \n   */\n  constructor(view) {\n    this.view = view;\n  }\n\n  /**\n   * @returns {string}\n   */\n  checkReadyToSubmit() {\n    const v = this.view;\n    if (v.signupInputs.login.value == '') return ERR.SIGNUP_NEED_LOGIN;\n    const val = v.signupInputs.login.value;\n    if (!this._validateLogin(val)) return ERR.SIGNUP_ILLEGAL_LOGIN;\n    if (v.signupInputs.password.value == '') return ERR.SIGNUP_NEED_PWD;\n    const pwd = v.signupInputs.password.value;\n    if (!this._validatePassword(pwd)) return ERR.SIGNUP_WEAK_PWD;\n    if (v.signupInputs.confirm.value == '') return ERR.SIGNUP_NEED_PWD_CONFIRM;\n    if (v.signupInputs.password.value != v.signupInputs.confirm.value) return ERR.SIGNUP_PWD_MISMATCH;\n    return ERR.NONE;\n  }\n\n  /**\n   * @returns {string}\n   */\n  async submit() {\n    const v = this.view;\n    try {\n      const response = await fetch('/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          login: v.signupInputs.login.value,\n          password: v.signupInputs.password.value\n        })\n      });\n      if (!response.ok) {\n        if (response.status == 409) return ERR.SIGNUP_LOGIN_EXISTS;\n        if (response.status != 400) throw new Error(`Response failed: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.success) return ERR.NONE;\n      switch (data.error_code) {\n        case API_ERR.ERR_NO_LOGIN_PWD:\n          return ERR.SIGNUP_BAD_REQUEST;\n        case API_ERR.ERR_INVAL_LOGIN:\n          return ERR.SIGNUP_ILLEGAL_LOGIN;\n        case API_ERR.ERR_INVAL_PWD:\n          return ERR.SIGNUP_WEAK_PWD;\n      }\n      console.error(error);\n      return ERR.FATAL;\n    } catch (error) {\n      console.error(error);\n      return ERR.FATAL;\n    }\n  }\n\n  /**\n   * @param {string} login\n   * @returns {bool}\n   */\n  _validateLogin(login) {\n    if (login.length < 3 || login.length > 20) return false;\n    const doubleRegex = /(\\.\\.|__)/;\n    const loginRegex = /^[a-zA-Z0-9_.]+$/;\n    return !doubleRegex.test(login) && loginRegex.test(login);\n  }\n\n  /**\n   * @param {string} password\n   * @returns {bool}\n   */\n  _validatePassword(password) {\n    if (password.length < 8) return false;\n    if (!/[a-z]/.test(password) || !/[A-Z]/.test(password)) return false;\n    if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) return false;\n    return true;\n  }\n}\nclass Form {\n  /**\n   * @param {View} view \n   */\n  constructor(view) {\n    this.view = view;\n    this.mode = 'login';\n    this.loginForm = new LoginForm(view);\n    this.signupForm = new SignupForm(view);\n    this.activeForm = this.loginForm;\n    this.locked = false;\n    _initHandlers(this);\n  }\n\n  /**\n   * @returns {bool}\n   */\n  isLocked() {\n    return this.locked;\n  }\n  lock() {\n    this.locked = true;\n  }\n  unlock() {\n    this.locked = false;\n  }\n  setModeLogin() {\n    if (this.isLocked()) return;\n    if (this.mode == 'login') return;\n    const v = this.view;\n    v.loginMark.classList.remove('auth-mark-inactive-dark');\n    v.signupMark.classList.add('auth-mark-inactive-dark');\n    v.signupFormBox.style.display = 'none';\n    v.loginFormBox.style.display = null;\n    _alignEye(v.loginInputs.password);\n    this.mode = 'login';\n    this.activeForm = this.loginForm;\n  }\n  setModeSignup() {\n    if (this.isLocked()) return;\n    if (this.mode == 'signup') return;\n    const v = this.view;\n    v.signupMark.classList.remove('auth-mark-inactive-dark');\n    v.loginMark.classList.add('auth-mark-inactive-dark');\n    v.loginFormBox.style.display = 'none';\n    v.signupFormBox.style.display = null;\n    _alignEye(v.signupInputs.password);\n    _alignEye(v.signupInputs.confirm);\n    this.mode = 'signup';\n    this.activeForm = this.signupForm;\n  }\n  async submit() {\n    if (this.isLocked()) return;\n    let err = this.activeForm.checkReadyToSubmit();\n    if (err != ERR.NONE) {\n      this.view.showWarning(err);\n      return;\n    }\n    err = await this.activeForm.submit();\n    if (err == ERR.FATAL) {\n      console.log(err);\n      this.view.showFail();\n      return;\n    }\n    if (err != ERR.NONE) {\n      this.view.showWarning(err);\n      return;\n    }\n    this.view.showSuccess();\n    setTimeout(() => {\n      //TODO test\n      window.location.href = '/return';\n    }, 700);\n  }\n}\n\n/**\n * @private\n * @param {Form} self \n */\nfunction _initHandlers(self) {\n  const v = self.view;\n  v.loginMark.addEventListener('mouseup', () => self.setModeLogin());\n  v.signupMark.addEventListener('mouseup', () => self.setModeSignup());\n  v.okButton.addEventListener('mouseup', () => self.submit());\n  for (let i in v.loginInputs) v.loginInputs[i].addEventListener('input', () => _onInput(v));\n  for (let i in v.signupInputs) v.signupInputs[i].addEventListener('input', () => _onInput(v));\n\n  //TODO v.signupInputs.login - on 'input' check existing logins\n\n  _makePwdEye(v.loginInputs.password);\n  _makePwdEye(v.signupInputs.password);\n  _makePwdEye(v.signupInputs.confirm);\n}\nfunction _makePwdEye(input) {\n  _alignEye(input);\n  const wrapper = input.parentNode.querySelector('.auth-eye-wrapper');\n  const eye = wrapper.querySelector('.auth-eye');\n  input._lxgo_isHidden = true;\n  wrapper.addEventListener('mouseup', () => {\n    input._lxgo_isHidden = !input._lxgo_isHidden;\n    input._lxgo_isHidden ? _closeEye(input, eye) : _openEye(input, eye);\n  });\n}\nfunction _openEye(input, eye) {\n  input.removeAttribute('type');\n  eye.classList.remove('auth-eye-closed');\n  eye.classList.add('auth-eye-opened');\n}\nfunction _closeEye(input, eye) {\n  input.setAttribute('type', 'password');\n  eye.classList.remove('auth-eye-opened');\n  eye.classList.add('auth-eye-closed');\n}\nfunction _alignEye(input) {\n  input.parentNode.querySelector('.auth-eye-wrapper').style.height = input.offsetHeight + 'px';\n}\nfunction _onInput(view) {\n  view.hideWarnings();\n}\ndocument.addEventListener(\"DOMContentLoaded\", function (e) {\n  const view = new View();\n  const form = new Form(view);\n});\n\n//# sourceURL=webpack://form/./src/App.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/App.js"]();
/******/ 	
/******/ })()
;